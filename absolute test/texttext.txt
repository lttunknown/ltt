
// Snake Game Implementation
const canvas = document.createElement('canvas');
const context = canvas.getContext('2d');
document.body.appendChild(canvas);

canvas.width = 400;
canvas.height = 400;

const gridSize = 20;
let snake = [{ x: 200, y: 200 }];
let food = { x: randomGridPosition(), y: randomGridPosition() };
let direction = { x: 0, y: 0 };
let newDirection = { x: 0, y: 0 };
let gameRunning = true;

// Game loop
function gameLoop() {
    if (!gameRunning) return;
    requestAnimationFrame(gameLoop);

    // Clear canvas
    context.fillStyle = 'black';
    context.fillRect(0, 0, canvas.width, canvas.height);

    // Update snake
    direction = newDirection;
    const head = { x: snake[0].x + direction.x * gridSize, y: snake[0].y + direction.y * gridSize };

    // Check for collisions (walls / self)
    if (
        head.x < 0 || head.x >= canvas.width ||
        head.y < 0 || head.y >= canvas.height ||
        snake.some(segment => segment.x === head.x && segment.y === head.y)
    ) {
        gameRunning = false;
        alert('Game over!');
        return;
    }

    snake.unshift(head);

    // Check for food
    if (head.x === food.x && head.y === food.y) {
        food = { x: randomGridPosition(), y: randomGridPosition() };
    } else {
        snake.pop();
    }

    // Draw food
    context.fillStyle = 'red';
    context.fillRect(food.x, food.y, gridSize, gridSize);

    // Draw snake
    context.fillStyle = 'green';
    for (const segment of snake) {
        context.fillRect(segment.x, segment.y, gridSize, gridSize);
    }
}

// Generate random grid position
function randomGridPosition() {
    return Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize;
}

// Handle keyboard input
document.addEventListener('keydown', event => {
    const keyMap = {
        ArrowUp: { x: 0, y: -1 },
        ArrowDown: { x: 0, y: 1 },
        ArrowLeft: { x: -1, y: 0 },
        ArrowRight: { x: 1, y: 0 }
    };

    const newDir = keyMap[event.key];
    if (newDir && (snake.length === 1 || (newDir.x !== -direction.x && newDir.y !== -direction.y))) {
        newDirection = newDir;
    }
});

// Start the game loop
gameLoop();